"use strict";

exports.__esModule = true;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _invariant = require("invariant");

var _invariant2 = _interopRequireDefault(_invariant);

var _RouterContext = require("./RouterContext");

var _RouterContext2 = _interopRequireDefault(_RouterContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Block = function (_React$Component) {
  _inherits(Block, _React$Component);

  function Block(props) {
    _classCallCheck(this, Block);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.release = props.method(props.message);
    return _this;
  }

  Block.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.message !== this.props.message) {
      this.release();
      this.release = this.props.method(this.props.message);
    }
  };

  Block.prototype.componentWillUnmount = function componentWillUnmount() {
    this.release();
  };

  Block.prototype.render = function render() {
    return null;
  };

  return Block;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  var messageType = _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]);

  Block.propTypes = {
    method: _propTypes2.default.func.isRequired,
    message: messageType.isRequired
  };
}

/**
 * The public API for prompting the user before navigating away from a screen.
 */
function Prompt(props) {
  return _react2.default.createElement(
    _RouterContext2.default.Consumer,
    null,
    function (context) {
      !context ? process.env.NODE_ENV !== "production" ? (0, _invariant2.default)(false, "You should not use <Prompt> outside a <Router>") : (0, _invariant2.default)(false) : void 0;

      return props.when ? _react2.default.createElement(Block, { method: context.history.block, message: props.message }) : null;
    }
  );
}

Prompt.defaultProps = {
  when: true
};

if (process.env.NODE_ENV !== "production") {
  var _messageType = _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]);

  Prompt.propTypes = {
    when: _propTypes2.default.bool,
    message: _messageType.isRequired
  };
}

exports.default = Prompt;