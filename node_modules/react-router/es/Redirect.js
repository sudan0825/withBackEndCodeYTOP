function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import PropTypes from "prop-types";
import { createLocation, locationsAreEqual } from "history";
import invariant from "invariant";

import RouterContext from "./RouterContext";
import generatePath from "./generatePath";

var Navigate = function (_React$Component) {
  _inherits(Navigate, _React$Component);

  function Navigate(props) {
    _classCallCheck(this, Navigate);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    props.method(props.to);
    return _this;
  }

  Navigate.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (!locationsAreEqual(prevProps.to, this.props.to)) {
      this.props.method(this.props.to);
    }
  };

  Navigate.prototype.render = function render() {
    return null;
  };

  return Navigate;
}(React.Component);

if (process.env.NODE_ENV !== "production") {
  var locationType = PropTypes.shape({
    pathname: PropTypes.string.isRequired,
    search: PropTypes.string.isRequired,
    hash: PropTypes.string.isRequired
  });

  Navigate.propTypes = {
    method: PropTypes.func.isRequired,
    to: locationType.isRequired
  };
}

/**
 * The public API for navigating programmatically with a component.
 */
function Redirect(props) {
  return React.createElement(
    RouterContext.Consumer,
    null,
    function (context) {
      !context ? process.env.NODE_ENV !== "production" ? invariant(false, "You should not use <Redirect> outside a <Router>") : invariant(false) : void 0;

      var method = props.push ? context.history.push : context.history.replace;
      var to = createLocation(props.computedMatch ? typeof props.to === "string" ? generatePath(props.to, props.computedMatch.params) : Object.assign({}, props.to, {
        pathname: generatePath(props.to.pathname, props.computedMatch.params)
      }) : props.to);

      return React.createElement(Navigate, { method: method, to: to });
    }
  );
}

Redirect.defaultProps = {
  push: false
};

if (process.env.NODE_ENV !== "production") {
  Redirect.propTypes = {
    push: PropTypes.bool,
    from: PropTypes.string,
    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired
  };
}

export default Redirect;