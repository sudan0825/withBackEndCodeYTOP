function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import PropTypes from "prop-types";
import invariant from "invariant";
import warning from "warning";

import RouterContext from "./RouterContext";
import matchPath from "./matchPath";
import warnAboutGettingProperty from "./utils/warnAboutGettingProperty";

function isEmptyChildren(children) {
  return React.Children.count(children) === 0;
}

function getContext(props, context) {
  var location = props.location || context.location;
  var match = props.computedMatch ? props.computedMatch // <Switch> already computed the match for us
  : props.path ? matchPath(location.pathname, props) : context.match;

  return Object.assign({}, context, { location: location, match: match });
}

/**
 * The public API for matching a single path and rendering.
 */

var Route = function (_React$Component) {
  _inherits(Route, _React$Component);

  function Route() {
    _classCallCheck(this, Route);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  // TODO: Remove this

  // TODO: Remove this
  Route.prototype.getChildContext = function getChildContext() {
    !this.context.router ? process.env.NODE_ENV !== "production" ? invariant(false, "You should not use <Route> outside a <Router>") : invariant(false) : void 0;

    var parentContext = this.context.router;
    if (process.env.NODE_ENV !== "production") {
      parentContext = parentContext._withoutWarnings;
    }

    var context = getContext(this.props, parentContext);
    if (process.env.NODE_ENV !== "production") {
      var contextWithoutWarnings = Object.assign({}, context);

      Object.keys(context).forEach(function (key) {
        warnAboutGettingProperty(context, key, "You should not be using this.context.router." + key + " directly. It is private API " + "for internal use only and is subject to change at any time. Instead, use " + "a <Route> or withRouter() to access the current location, match, etc.");
      });

      context._withoutWarnings = contextWithoutWarnings;
    }

    return {
      router: context
    };
  };

  // TODO: Remove this


  Route.prototype.render = function render() {
    var _this2 = this;

    return React.createElement(
      RouterContext.Consumer,
      null,
      function (context) {
        !context ? process.env.NODE_ENV !== "production" ? invariant(false, "You should not use <Route> outside a <Router>") : invariant(false) : void 0;

        var props = getContext(_this2.props, context);

        var _props = _this2.props,
            children = _props.children,
            component = _props.component,
            render = _props.render;

        // Preact uses an empty array as children by
        // default, so use null if that's the case.

        if (Array.isArray(children) && children.length === 0) {
          children = null;
        }

        if (typeof children === "function") {
          children = children(props);

          if (children === undefined) {
            if (process.env.NODE_ENV !== "production") {
              var path = _this2.props.path;


              process.env.NODE_ENV !== "production" ? warning(false, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") : void 0;
            }

            children = null;
          }
        }

        return React.createElement(
          RouterContext.Provider,
          { value: props },
          children && !isEmptyChildren(children) ? children : props.match ? component ? React.createElement(component, props) : render ? render(props) : null : null
        );
      }
    );
  };

  return Route;
}(React.Component);

Route.contextTypes = {
  router: PropTypes.object.isRequired
};
Route.childContextTypes = {
  router: PropTypes.object.isRequired
};


if (process.env.NODE_ENV !== "production") {
  Route.propTypes = {
    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
    component: PropTypes.func,
    exact: PropTypes.bool,
    location: PropTypes.object,
    path: PropTypes.string,
    render: PropTypes.func,
    sensitive: PropTypes.bool,
    strict: PropTypes.bool
  };

  Route.prototype.componentDidMount = function () {
    process.env.NODE_ENV !== "production" ? warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : void 0;

    process.env.NODE_ENV !== "production" ? warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : void 0;

    process.env.NODE_ENV !== "production" ? warning(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : void 0;
  };

  Route.prototype.componentDidUpdate = function (prevProps) {
    process.env.NODE_ENV !== "production" ? warning(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;

    process.env.NODE_ENV !== "production" ? warning(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
  };
}

export default Route;