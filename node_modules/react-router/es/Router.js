function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import PropTypes from "prop-types";
import warning from "warning";

import RouterContext from "./RouterContext";
import warnAboutGettingProperty from "./utils/warnAboutGettingProperty";

function getContext(props, state) {
  return {
    history: props.history,
    location: state.location,
    match: Router.computeRootMatch(state.location.pathname),
    staticContext: props.staticContext
  };
}

/**
 * The public API for putting history on context.
 */

var Router = function (_React$Component) {
  _inherits(Router, _React$Component);

  Router.computeRootMatch = function computeRootMatch(pathname) {
    return { path: "/", url: "/", params: {}, isExact: pathname === "/" };
  };

  // TODO: Remove this


  // TODO: Remove this
  Router.prototype.getChildContext = function getChildContext() {
    var context = getContext(this.props, this.state);

    if (process.env.NODE_ENV !== "production") {
      var contextWithoutWarnings = Object.assign({}, context);

      Object.keys(context).forEach(function (key) {
        warnAboutGettingProperty(context, key, "You should not be using this.context.router." + key + " directly. It is private API " + "for internal use only and is subject to change at any time. Instead, use " + "a <Route> or withRouter() to access the current location, match, etc.");
      });

      context._withoutWarnings = contextWithoutWarnings;
    }

    return {
      router: context
    };
  };

  function Router(props) {
    _classCallCheck(this, Router);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      location: props.history.location
    };

    _this.unlisten = props.history.listen(function (location) {
      _this.setState({ location: location });
    });
    return _this;
  }

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  Router.prototype.render = function render() {
    var context = getContext(this.props, this.state);

    return React.createElement(RouterContext.Provider, {
      children: this.props.children || null,
      value: context
    });
  };

  return Router;
}(React.Component);

Router.childContextTypes = {
  router: PropTypes.object.isRequired
};


if (process.env.NODE_ENV !== "production") {
  Router.propTypes = {
    children: PropTypes.node,
    history: PropTypes.object.isRequired,
    staticContext: PropTypes.object
  };

  Router.prototype.componentDidUpdate = function (prevProps) {
    process.env.NODE_ENV !== "production" ? warning(prevProps.history === this.props.history, "You cannot change <Router history>") : void 0;
  };
}

export default Router;